<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <a class="navbar-brand" href="#">Casino</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="/keno">Keno <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/ruleta">Ruleta</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/tragamonedas">Tragamonedas</a>
                </li>
            </ul>
        </div>
    </nav>
    <h1>
        Keno
    </h1>
    <form action="javascript:playKeno();">
        <div class="form-group">
            <label for="numCasillas">Número de casillas que quieres apostar</label>
            <select name="numCasillas" id="numCasillas">
                <option value="1">1</option>    
                <option value="2">2</option>    
                <option value="3">3</option>    
                <option value="4">4</option>    
                <option value="5">5</option>    
                <option value="6">6</option>    
                <option value="7">7</option>    
                <option value="8">8</option>    
                <option value="9">9</option>    
                <option value="10">10</option>    
            </select>
        </div>
        <div class="form-group">
            <label for="casillas">Escoge tus casillas</label>
            <div class="casillas">
            </div>
        </div>
        <div class="form-group">
            <label for="apuesta">¿Cuánto quieres apostar?</label>
            <input type="number" placeholder="Apuesta:" id="apuesta" required> 
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-large btn-warning" >Apostar</button>
        </div>
    </form>
    <div class="form-group">
        <button id="jugarKeno"  class="btn btn-large btn-warning" >¡Juega keno de pryeba! (Costo 0.02 ether)</button>
    </div>
    <div class="form-group">
        <button id="getResultsKeno"  class="btn btn-large btn-warning">Obtener resultados</button>
    </div>
    <div class="form-group">
        <button id="getStatusKeno"  class="btn btn-large btn-warning">Obtener estatus</button>
    </div>

    
</body>
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

<script src="/web3.js" type="text/javascript"></script>
<script src="/truffle-contract.js" type="text/javascript"></script>
<script src="/prueba.js" type="text/javascript"></script>

<script>
    
    
</script>

<script>
    // Variables debug. Ignorar.
    var aux = "";
    var aux2 = "";
    // Casillas y cantidad a apostar.
    var num_casillas ;
    var apuesta      ;
    var casillasArray = [];


    $(document).ready(function(){
        /* Actualiza dependiendo de la opción de número de casillas a apostar.*/
        $('#numCasillas').change(function(){
            num_casillas = $(this).val();
            $('.casillas').html('');
            for(i = 1; i <= num_casillas; i++){
                $('.casillas').append(`<input type="number" data-id="${i}" placeholder="Casilla #${i}" id="casilla${i}" min="1" max="80" required>`);
            }
        });

        playKeno = () => {
            num_casillas = $('#numCasillas').val();
            apuesta      = $('#apuesta').val();
            casillasArray = [];
            for (i = 1; i<= num_casillas; i++){
                currentVal = $(`#casilla${i}`).val();
                if ((currentVal > 80) || (currentVal < 1)){
                    alert("Los números deben de ir de 1 a 80.");
                    return;
                }
                casillasArray.push(currentVal);
            }
            playWeb3();
        }

        var web3;
        if (typeof web3 !== 'undefined') {
            web3 = new Web3(web3.currentProvider);
            //web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/8a4a483fc902489d93bd7d5d07ef8512"));
        } else {
            //web3 = new Web3(web3.currentProvider);
            // set the provider you want from Web3.providers
            web3 = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/8a4a483fc902489d93bd7d5d07ef8512"));
        }
        // Necesario para MetaMask.
        const ethEnabled = () => {
        if (window.ethereum) {
            window.web3 = new Web3(window.ethereum);
            window.ethereum.enable();
            return true;
        }
            return false;
        }
        ethEnabled();
        //play();
        //playWeb3();

        $('#jugarKeno').click(function(){
            //playWeb3();
        });
        $('#getResultsKeno').click(function(){
            getResultsKeno();
        });
        $('#getStatusKeno').click(function(){
            getStatusKeno();
        });
        
    });
    function play(){
        console.log("Jugando");
        var provider = new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/8a4a483fc902489d93bd7d5d07ef8512");
        //var providerInstance = new Web3(new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/8a4a483fc902489d93bd7d5d07ef8512"));
        //var provider = web3;

        console.log("PRovider");
        console.log(provider);
        let accounts = web3.eth.getAccounts()
        accounts.then((currentAccounts) =>{
            web3.eth.defaultAccount = currentAccounts[0];
            console.log("accounts:")
            console.log(currentAccounts[0]);
            
            var EthereumSessionTruffle = TruffleContract(
                {abi: [
                    {
                        inputs: [],
                        stateMutability: 'payable',
                        type: 'constructor',
                        payable: true
                    },
                    {
                        anonymous: false,
                        inputs: [ [Object] ],
                        name: 'logInfoJuego',
                        type: 'event'
                    },
                    {
                        anonymous: false,
                        inputs: [ [Object], [Object], [Object], [Object] ],
                        name: 'logPremio',
                        type: 'event'
                    },
                    {
                        inputs: [],
                        name: 'jugar',
                        outputs: [],
                        stateMutability: 'payable',
                        type: 'function',
                        payable: true
                    },
                    {
                        inputs: [],
                        name: 'verResultados',
                        outputs: [],
                        stateMutability: 'nonpayable',
                        type: 'function'
                    },
                    {
                        inputs: [ [Object], [Object] ],
                        name: '__callback',
                        outputs: [],
                        stateMutability: 'nonpayable',
                        type: 'function'
                    },
                    {
                        inputs: [ [Object], [Object], [Object] ],
                        name: '__callback',
                        outputs: [],
                        stateMutability: 'nonpayable',
                        type: 'function'
                    }
                    ]})
            console.log(EthereumSessionTruffle);
            EthereumSessionTruffle.setProvider(provider);
            var esTruffleInstance = null;
            EthereumSessionTruffle.at("0x2Cf911305d29ca55C1E0826f097a75037d5c8A2A").then((instance) =>{
            //EthereumSessionTruffle.at("0x2965B9c28ec6d0706c41175a5DD00E76974dB77e").then((instance) =>{ // Contrato de Daniel
                
                esTruffleInstance = instance;
                instance.jugar({from: currentAccounts[0], value: 20000000000000000});
                return instance.jugar({from: currentAccounts[0], value: 20000000000000000})
            })
            .then(() =>{
                console.log("Instance:")
                console.log(instance)
                resultados = instance.consultarResultado({from: currentAccounts[0]});
                return resultados;
            });  
        });
    }
    /*
    *   Realiza el juego con web3.
    */
    function playWeb3(){
        const contractAdress = "0xe966984f6A7c3f9a80516E2866E62686CD6372a5";      // keno
        
        console.log("Jugando web3");
        var provider = new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/8a4a483fc902489d93bd7d5d07ef8512");
        // Versión 2
        var EthSession = new web3.eth.Contract([
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_myid",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "string",
                        "name": "_result",
                        "type": "string"
                    }
                ],
                "name": "__callback",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_queryId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "string",
                        "name": "_result",
                        "type": "string"
                    },
                    {
                        "internalType": "bytes",
                        "name": "_proof",
                        "type": "bytes"
                    }
                ],
                "name": "__callback",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "consultarResultado",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint8",
                        "name": "cantidadNumeros",
                        "type": "uint8"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "numerosElegidos",
                        "type": "uint256[]"
                    }
                ],
                "name": "entrarAlJuego",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "stateMutability": "payable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "name": "logJuego",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "descripcion",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256[]",
                        "name": "obtenidos",
                        "type": "uint256[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256[]",
                        "name": "elegidos",
                        "type": "uint256[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "atinados",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "premio",
                        "type": "uint256"
                    }
                ],
                "name": "logResultado",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "verEstado",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "estado",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ], contractAdress); 
        // Versión 3: return
        //var EthSession = new web3.eth.Contract([{"inputs":[],"stateMutability":"payable","type":"constructor","payable":true},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"}],"name":"logInfoJuego","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"","type":"string"},{"indexed":false,"internalType":"uint256[]","name":"","type":"uint256[]"},{"indexed":false,"internalType":"string","name":"","type":"string"},{"indexed":false,"internalType":"uint256","name":"","type":"uint256"}],"name":"logPremio","type":"event"},{"inputs":[],"name":"jugar","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"payable","type":"function","payable":true},{"inputs":[],"name":"verResultados","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_myid","type":"bytes32"},{"internalType":"string","name":"_result","type":"string"}],"name":"__callback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_queryId","type":"bytes32"},{"internalType":"string","name":"_result","type":"string"},{"internalType":"bytes","name":"_proof","type":"bytes"}],"name":"__callback","outputs":[],"stateMutability":"nonpayable","type":"function"}], contractAdress); 
        let accounts = web3.eth.getAccounts()
        accounts.then((currentAccounts) =>{
            web3.eth.defaultAccount = currentAccounts[0];
            console.log("accounts:");
            console.log(currentAccounts[0]);
            //return currentAccounts;
            return new Promise((resolve, reject) =>{
                console.log("Cuentas");
                console.log(currentAccounts);
                console.log('EthSession');
                console.log(EthSession.methods);
                return EthSession.methods.entrarAlJuego(num_casillas,casillasArray).send({from: currentAccounts[0], value: apuesta}).then((res) => {
                //return EthSession.methods.consultarResultado().send({from: currentAccounts[0]}).then((res) => {
                    console.log("Terminando de jugar... Respuesta:");
                    console.log(res);
                    console.log("Obteniendo resultados");
                    aux = res;
                    console.log(aux);
                    mensaje = res.events.logJuego.returnValues[0];
                    alert(mensaje);
                    return;
                }).catch(error =>{
                    alert("No se puede jugar, intencalo de nuevo más tarde");
                    console.log("No se puede jugar, primero necesitas ver los resultados de tu partida anterior.");
                    console.log(error);
                });
            });
        })
        
    }
    function getResultsKeno(){
        const contractAdress = "0xe966984f6A7c3f9a80516E2866E62686CD6372a5";      // Keno
        
        console.log("obteniendo Resultados");
        var provider = new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/8a4a483fc902489d93bd7d5d07ef8512");
        // Versión 2
        var EthSession = new web3.eth.Contract([
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_myid",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "string",
                        "name": "_result",
                        "type": "string"
                    }
                ],
                "name": "__callback",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_queryId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "string",
                        "name": "_result",
                        "type": "string"
                    },
                    {
                        "internalType": "bytes",
                        "name": "_proof",
                        "type": "bytes"
                    }
                ],
                "name": "__callback",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "consultarResultado",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint8",
                        "name": "cantidadNumeros",
                        "type": "uint8"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "numerosElegidos",
                        "type": "uint256[]"
                    }
                ],
                "name": "entrarAlJuego",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "stateMutability": "payable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "name": "logJuego",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "descripcion",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256[]",
                        "name": "obtenidos",
                        "type": "uint256[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256[]",
                        "name": "elegidos",
                        "type": "uint256[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "atinados",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "premio",
                        "type": "uint256"
                    }
                ],
                "name": "logResultado",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "verEstado",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "estado",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ], contractAdress); 
        
        let accounts = web3.eth.getAccounts()
        accounts.then((currentAccounts) =>{
            web3.eth.defaultAccount = currentAccounts[0];
            console.log("accounts:");
            console.log(currentAccounts[0]);
            //return currentAccounts;
            return new Promise((resolve, reject) =>{
                console.log("hola");
                console.log(currentAccounts);
                console.log('EthSession');
                console.log(EthSession.methods);
                return EthSession.methods.consultarResultado().send({from: currentAccounts[0]}).then((res) => {
                //return EthSession.methods.consultarResultado().send({from: currentAccounts[0]}).then((res) => {
                    aux = res;
                    console.log("¡Estos son los resultados!");
                    //results = res.events.logPremio.returnValues;
                    //console.log(results[0] + '   ' +results[1] + '   ' + results[2] + results[3]);
                    //alert( results[0] + '   ' +results[1] + '   ' + results[2] + results[3] );
                    resultados = res.events.logResultado[0].returnValues;
                    alert(`${resultados[0]}
                        ${resultados[1]}
                        Estos son los números que escogiste:
                        ${resultados[2]}
                        Le atinaste a ${resultados[3]}
                        Tu premio en wei es de ${resultados[4]}
                    `);
                    console.log(res);
                    return;
                }).catch(error =>{
                    alert("Resultados aún no listos. Los resultados pueden tardar un poco en generarse.");
                    console.log("Ha ocurrido un error al obtener resultados:");
                    console.log(error);
                    aux = error;
                });
            });
        })

    }

    function getStatusKeno(){
        const contractAdress = "0xe966984f6A7c3f9a80516E2866E62686CD6372a5";      // Keno
        
        console.log("obteniendo Resultados");
        var provider = new Web3.providers.HttpProvider("https://ropsten.infura.io/v3/8a4a483fc902489d93bd7d5d07ef8512");
        // Versión 2
        var EthSession = new web3.eth.Contract([
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_myid",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "string",
                        "name": "_result",
                        "type": "string"
                    }
                ],
                "name": "__callback",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "bytes32",
                        "name": "_queryId",
                        "type": "bytes32"
                    },
                    {
                        "internalType": "string",
                        "name": "_result",
                        "type": "string"
                    },
                    {
                        "internalType": "bytes",
                        "name": "_proof",
                        "type": "bytes"
                    }
                ],
                "name": "__callback",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [],
                "name": "consultarResultado",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
            },
            {
                "inputs": [
                    {
                        "internalType": "uint8",
                        "name": "cantidadNumeros",
                        "type": "uint8"
                    },
                    {
                        "internalType": "uint256[]",
                        "name": "numerosElegidos",
                        "type": "uint256[]"
                    }
                ],
                "name": "entrarAlJuego",
                "outputs": [],
                "stateMutability": "payable",
                "type": "function"
            },
            {
                "inputs": [],
                "stateMutability": "payable",
                "type": "constructor"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "",
                        "type": "string"
                    }
                ],
                "name": "logJuego",
                "type": "event"
            },
            {
                "anonymous": false,
                "inputs": [
                    {
                        "indexed": false,
                        "internalType": "string",
                        "name": "descripcion",
                        "type": "string"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256[]",
                        "name": "obtenidos",
                        "type": "uint256[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256[]",
                        "name": "elegidos",
                        "type": "uint256[]"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "atinados",
                        "type": "uint256"
                    },
                    {
                        "indexed": false,
                        "internalType": "uint256",
                        "name": "premio",
                        "type": "uint256"
                    }
                ],
                "name": "logResultado",
                "type": "event"
            },
            {
                "inputs": [],
                "name": "verEstado",
                "outputs": [
                    {
                        "internalType": "string",
                        "name": "estado",
                        "type": "string"
                    }
                ],
                "stateMutability": "view",
                "type": "function"
            }
        ], contractAdress); 
        
        let accounts = web3.eth.getAccounts()
        accounts.then((currentAccounts) =>{
            web3.eth.defaultAccount = currentAccounts[0];
            console.log("accounts:");
            console.log(currentAccounts[0]);
            //return currentAccounts;
            return new Promise((resolve, reject) =>{
                console.log("hola");
                console.log(currentAccounts);
                console.log('EthSession');
                console.log(EthSession.methods);
                return EthSession.methods.verEstado().call().then((estado) => {
                //return EthSession.methods.consultarResultado().send({from: currentAccounts[0]}).then((res) => {
                    console.log("Estado:");
                    console.log(estado);
                    alert(estado);
                    return;
                }).catch(error =>{
                    alert("Error al consultar estado");
                    console.log("Ha ocurrido un error al consultar estado:");
                    console.log(error);
                    aux2 = error;
                });
            });
        })

    }
</script>